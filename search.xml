<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[springmvc搭建JavaWeb应用]]></title>
    <url>%2F2017%2F09%2F27%2Fspringmvc-1%2F</url>
    <content type="text"><![CDATA[(function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https') { bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else { bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s); })(); var _hmt = _hmt || []; (function() { var hm = document.createElement("script"); hm.src = "https://hm.baidu.com/hm.js?a0e8663aecb9b070b35645059a1cebbb"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(hm, s); })(); 本次记录利用springmvc框架搭建web应用，用到的IDE工具为 IntelliJ IDEA 2017.1.4 x64 一:新建项目,因为本次版本管理工具采用maven,左侧选中maven,选中[Create from archetype],如下图选中cocoon-22-archetype-webapp构建web应用 二:填写maven的GroupId和ArtifactId 三:选择当前计算机安装的mavem安装位置及配置文件地址和本地仓库位置 四:在main目录下新建java文件夹，用于存放java代码，在project structure 中设置java文件夹为Source 五:在webapp/WEB-INF/下新建spring-mvc-servlet.xml文件,新建view文件夹用于存放视图，当前项目结构如下图: 六:在pom.xml中加入springmvc所需的包，如下引完包之后用maven clear下(1)在project标签下加入如下定义123456&lt;!-- spring 当做springmvc的父模块 --&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.8.RELEASE&lt;/version&gt;&lt;!-- --&gt; &lt;/parent&gt; (2)在dependencies标签下加入springmvc的所需jar包及jsp标准库和日志库1234567891011121314151617181920212223242526272829303132&lt;!-- spring mvc --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- jsp标准标签库 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.glassfish&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet.jsp.jstl&lt;/artifactId&gt; &lt;version&gt;3.0.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-web&lt;/artifactId&gt; &lt;/dependency&gt; 七:在web.xml中配置springmvc的核心过滤器,用于在web程序初始化的时候启动springmvc123456789101112131415161718192021222324252627282930&lt;listener&gt; &lt;listener-class&gt; org.springframework.web.context.ContextLoaderListener &lt;/listener-class&gt; &lt;/listener&gt; &lt;servlet&gt; &lt;servlet-name&gt;spring-mvc&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;load-on-startup&gt;2&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;spring-mvc&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;!-- 解决工程编码过滤器 --&gt; &lt;filter&gt; &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; 八:配置spring-mvc-servlet.xml文件1234567891011121314151617181920212223242526272829303132333435&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xsi:schemaLocation=&quot; http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt; &lt;!--&lt;mvc:annotation-driven/&gt;相当于注册了DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter两个bean，配置一些messageconverter。即解决了@Controller注解的使用前提配置。 --&gt; &lt;mvc:annotation-driven /&gt; &lt;!--&lt;context:annotation-config/&gt;是对包进行扫描，实现注释驱动Bean定义，同时将bean自动注入容器中使用。即解决了@Controller标识的类的bean的注入和使用。 --&gt; &lt;context:annotation-config /&gt; &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt; &lt;!--前缀 --&gt; &lt;property name=&quot;prefix&quot; value=&quot;/view/&quot;/&gt; &lt;!--后缀 --&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt; &lt;!--这里视图技术暂时采用jsp --&gt; &lt;property name=&quot;contentType&quot; value=&quot;text/html;charset=UTF-8&quot; /&gt; &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot; /&gt; &lt;/bean&gt; &lt;!-- control类 --&gt; &lt;bean id=&quot;index&quot; class=&quot;cn.com.control.HelloSpringMvc&quot;&gt; &lt;/bean&gt;&lt;/beans&gt; 九:编写java代码,实现视图控制器.这里是一个简单的页面跳转,使用@Controller注解标识这个类是一个控制器，@RequestMapping注解说明这个类进入的request请求地址，如@RequestMapping(value = “/springmvc”),springmvc相对于strtus框架来说,springmvc是方法级别的拦截，@RequestMapping注解也可以写在方法上.如下面代码:注意:我返回的的数据类型是ModelAndView,这个是springmvc提供的模型和视图的一个解析器，可直接传入视图名，或者携带数据到前端页面new ModelAndView().addObject(“object”, Object);1234567891011121314151617package cn.com.control;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.ModelAndView;@Controller@RequestMapping(value = &quot;/springmvc&quot;)public class HelloSpringMvc &#123; @RequestMapping(value = &quot;/index&quot;) public ModelAndView test(ModelAndView mav)&#123; mav = new ModelAndView(&quot;index_page&quot;); mav.addObject(&quot;name&quot;,&quot;leiYang&quot;); return mav; &#125;&#125; 十:index_page.jsp代码如下:123456789&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;spring mvc&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;你好 $&#123;name&#125;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 十一:如下图配置好tomcat 十二:打开浏览器访问地址,]]></content>
      <tags>
        <tag>java</tag>
        <tag>springMvc</tag>
        <tag>spring</tag>
      </tags>
  </entry>
</search>
